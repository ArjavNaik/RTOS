/**
  ******************************************************************************
  * @file    main.c
  * @author  Ac6
  * @version V1.0
  * @date    01-December-2013
  * @brief   Default main function.
  ******************************************************************************
*/


#include "stm32f4xx.h"
#include <stdio.h>
#include <stdint.h>
#include <string.h>

#include "stm32f4xx.h"
#include "FreeRTOS.h" // Always include this when working with FreeRTOS
#include "task.h"
#include "queue.h"
#include "timers.h"

//macros
#define FALSE 0
#define TRUE 1

// task handler
TaskHandle_t xTaskHandle1 = NULL;
TaskHandle_t xTaskHandle2 = NULL;
TaskHandle_t xTaskHandle3 = NULL;
TaskHandle_t xTaskHandle4 = NULL;

// function prototypes
static void prvSetupHardware(void);
static void prvSetupUart(void);
void prvSetupGpio(void);
void printmsg(char *msg);
void rtos_delay(uint32_t dealy_in_ms);

// buffer for UART
char usr_msg[250]={0};

// task prototypes
void vTask1_menu_display(void *param);
void vTask2_cmd_handling(void *param);
void vTask3_cmd_processing(void *param);
void vTask4_uart_write(void *param);

// queue handler
QueueHandle_t cmd_q; // return type and variable of queue create command
QueueHandle_t uart_q; // return type and variable of queue create command

//struct for command
typedef struct APP_CMD{
	uint8_t COMMAND_NUM;
	uint8_t COMMAND_ARG;
}APP_CMD_t;

// some gloabal variable
uint8_t command_len = 0;
uint8_t command_buffer[20];

//menu to be displayed
char menu[]={"\
\r\nLED_ON             ----> 1 \
\r\nLED_OFF            ----> 2 \
\r\nLED_TOGGLE         ----> 3 \
\r\nLED_TOGGLE_OFF     ----> 4 \
\r\nLED_READ_STATUS    ----> 5 \
\r\nRTC_PRINT_DATETIME ----> 6 \
\r\nEXIT_APP           ----> 0 \
\r\nType your option here : "};


int main(void)
{

	DWT->CTRL |= (1 << 0);     //Enable CYCCNT in DWT_CTRL.

	// 1.Reset the RCC clock configuration to the default reset state
	// This function makes HSI ON, HSE OFF, system clock = 16 MHz, CPU clock = 16 MHz
	RCC_DeInit();

	// 2. Update the SystemCoreClock variable
	SystemCoreClockUpdate();

	prvSetupHardware();

	sprintf(usr_msg,"\r\n Application \r\n");
	printmsg(usr_msg);

	//Start Recording
	SEGGER_SYSVIEW_Conf();
	SEGGER_SYSVIEW_Start();

	// queue creation
	cmd_q = xQueueCreate(10,sizeof(APP_CMD_t*));
	uart_q = xQueueCreate(10,sizeof(char*));

	if((cmd_q != NULL) && (uart_q != NULL)){

	// 3. Creating tasks
	xTaskCreate(vTask1_menu_display, "Task-1", 500, NULL, 1, &xTaskHandle1);
	xTaskCreate(vTask2_cmd_handling, "TASK-2", 500, NULL, 1, &xTaskHandle2);
	xTaskCreate(vTask3_cmd_processing, "TASK-3", 500, NULL, 1, &xTaskHandle3);
	xTaskCreate(vTask4_uart_write, "TASK-4", 500, NULL, 1, &xTaskHandle4);

	/* Start the scheduler */

	vTaskStartScheduler();
	}
	else{
		sprintf(usr_msg,"Queue creation failed\r\n");
		printmsg(usr_msg);
	}

	for(;;);
}

void vTask1_menu_display(void *param){

	char *pData = menu;
	while(1){
		xQueueSend(uart_q,&pData,portMAX_DELAY);
		// lets wait here until user sends
		xTaskNotifyWait(0,0,NULL,portMAX_DELAY);
	}

}

void vTask2_cmd_handling(void *param){

	while(1){

	}

}

void vTask3_cmd_processing(void *param){

	while(1){

	}

}

void vTask4_uart_write(void *param){
	char *pData = NULL;
	while(1){

		xQueueReceive(uart_q, &pData, portMAX_DELAY);
		//printmsg(pData);

	}

}



static void prvSetupUart(void){
	GPIO_InitTypeDef gpio_uart_pins;

		USART_InitTypeDef uart2_init;

		// 1. Enable the UART2 and GPIOA  Peripheral clock
		RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART2,ENABLE);
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA,ENABLE);


		//PA 2 is USART2_TX, PA 3 is USART2_RX

		//2. Alternate Pin configuration to function as UART

		//set the value of all member element of struct gpio_uart_pins as 0 because they may contain garbage
		memset(&gpio_uart_pins,0,sizeof(gpio_uart_pins));

		gpio_uart_pins.GPIO_Pin = GPIO_Pin_2 | GPIO_Pin_3;
		gpio_uart_pins.GPIO_Mode = GPIO_Mode_AF;
		gpio_uart_pins.GPIO_PuPd = GPIO_PuPd_UP; // because when the uart line is idle it is 1

		GPIO_Init(GPIOA, &gpio_uart_pins);

		// 3. Alternate Function (AF) Mode setting for the PINs
		GPIO_PinAFConfig(GPIOA, GPIO_PinSource2, GPIO_AF_USART2); // For PA2 which is config as UART TX (AF7 mode)
		GPIO_PinAFConfig(GPIOA, GPIO_PinSource3, GPIO_AF_USART2); // For PA3 which is config as UART RX (AF7 mode)

		// 4. UART parameter Config

		//set the value of all member element of struct uart2_init as 0 because they may contain garbage
		memset(&uart2_init,0,sizeof(uart2_init));

		uart2_init.USART_BaudRate = 115200;
		uart2_init.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
		uart2_init.USART_Mode = USART_Mode_Tx | USART_Mode_Rx;
		uart2_init.USART_Parity = USART_Parity_No;
		uart2_init.USART_StopBits = USART_StopBits_1;
		uart2_init.USART_WordLength = USART_WordLength_8b;
		USART_Init(USART2, &uart2_init);

		//lets enable the UART byte reception interrupt in the microcontroller
		USART_ITConfig(USART2,USART_IT_RXNE,ENABLE);

		//lets set the priority in NVIC for the UART2 interrupt
		NVIC_SetPriority(USART2_IRQn,5);

		//enable the UART2 IRQ in the NVIC
		NVIC_EnableIRQ(USART2_IRQn);

		//5. enable the UART2 peripheral
		USART_Cmd(USART2, ENABLE);

}


void printmsg(char *msg){

	for(uint32_t i=0; i<strlen(msg); i++)
	{
		// wait till the transmit data register is empty
		while( USART_GetFlagStatus(USART2,USART_FLAG_TXE) != SET);
		USART_SendData(USART2, msg[i]);
	}

}


void prvSetupGpio(void){

	// board specific function
	// 1. Enable GPIO clocks for  A and C
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA,ENABLE);
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC,ENABLE);
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG,ENABLE);

	// 2. Configure GPIO Pins
	GPIO_InitTypeDef led_init, button_init;

	//set the value of all member element of struct gpio_uart_pins as 0 because they may contain garbage
	memset(&led_init,0,sizeof(led_init));
	memset(&button_init,0,sizeof(button_init));

	led_init.GPIO_Pin = GPIO_Pin_5;
	led_init.GPIO_Mode = GPIO_Mode_OUT;
	led_init.GPIO_PuPd = GPIO_PuPd_NOPULL;
	led_init.GPIO_OType = GPIO_OType_PP;
	led_init.GPIO_Speed = GPIO_Low_Speed;

	GPIO_Init(GPIOA, &led_init);


	button_init.GPIO_Pin = GPIO_Pin_13;
	button_init.GPIO_Mode = GPIO_Mode_IN;
	button_init.GPIO_PuPd = GPIO_PuPd_NOPULL;
	button_init.GPIO_OType = GPIO_OType_PP; // not matters as it is input mode
	button_init.GPIO_Speed = GPIO_Low_Speed;

	GPIO_Init(GPIOC, &button_init);

	//interrupt configuration for the button (PC13)
		//1. system configuration for exti line (SYSCFG settings)
		SYSCFG_EXTILineConfig(EXTI_PortSourceGPIOC,EXTI_PinSource13);

		//2. EXTI line configuration 13,falling edge, interrup mode
		EXTI_InitTypeDef exti_init;
		exti_init.EXTI_Line = EXTI_Line13;
		exti_init.EXTI_Mode = EXTI_Mode_Interrupt;
		exti_init.EXTI_Trigger = EXTI_Trigger_Falling;
		exti_init.EXTI_LineCmd = ENABLE;
		EXTI_Init(&exti_init);


		//3. NVIC settings (IRQ settings for the selected EXTI line(13)
		NVIC_SetPriority(EXTI15_10_IRQn,5);
		NVIC_EnableIRQ(EXTI15_10_IRQn);


}

static void prvSetupHardware(void){

	//setup UART2
	prvSetupUart();

	// setup GPIO
	prvSetupGpio();

}
void rtos_delay( uint32_t delay_in_ms){

	uint32_t current_tick_count = xTaskGetTickCount();

	uint32_t delay_in_ticks = ( delay_in_ms * configTICK_RATE_HZ ) / 1000 ;

	while( xTaskGetTickCount() <  (current_tick_count + delay_in_ticks));

}

void USART2_IRQHandler(void){
		uint16_t data_byte;
		BaseType_t xHigherPriorityTaskWoken = pdFALSE;

		if( USART_GetFlagStatus(USART2,USART_FLAG_RXNE) )
		{
			//a data byte is received from the user
			data_byte = USART_ReceiveData(USART2);

			command_buffer[command_len++] = (data_byte & 0xFF) ;

			if(data_byte == '\r')
			{
				//then user is finished entering the data

				//reset the command_len variable
				command_len = 0;

				//lets notify the command handling task
				xTaskNotifyFromISR(xTaskHandle2,0,eNoAction,&xHigherPriorityTaskWoken);

			}

		}


}

